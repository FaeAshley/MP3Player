# 🎵 JavaScript MP3 Player

## **Overview**
This is a simple, interactive **MP3 Player** built with **HTML, CSS, and JavaScript**. It allows users to **play, pause, skip, shuffle, and delete songs** while displaying real-time song progress, playback duration, and highlighting the current song.

## **Features**
✅ **Play, Pause, Next, Previous, and Shuffle controls**
✅ **Dynamic Playlist Management** (songs can be added, played, or deleted)
✅ **Progress Bar with Click & Drag Seek Functionality**
✅ **Displays Current & Total Song Duration**
✅ **Highlights the Active Song in the Playlist**
✅ **Responsive UI with Album Covers & Song Details**

## **Installation & Setup**

1. **Clone or Download the Repository**
   ```bash
   git clone https://github.com/your-repo/mp3-player.git
   cd mp3-player
   ```

2. **Open the `index.html` file** in your browser.

3. Ensure you have a stable internet connection to load external audio files from **freeCodeCamp's CDN**.

---

## **Usage Guide**

### **🎶 Playing a Song**
- Click on any song in the playlist to **start playback**.
- Click **Pause** to stop temporarily.
- Click **Play** again to resume where you left off.

### **⏭ Skipping & Navigating Songs**
- **Next Button**: Moves to the next song in the playlist.
- **Previous Button**: Moves to the previous song.

### **🔀 Shuffle Mode**
- Clicking the **Shuffle button** randomizes the playlist order.
- Clicking **Next** or **Previous** will follow the shuffled order.

### **🎚 Adjusting Playback Progress**
- The **progress bar** moves dynamically as the song plays.
- Click anywhere on the **progress bar** to **jump** to a specific point in the song.
- Drag the **progress indicator** to scrub through the song in real time.

### **🗑 Deleting a Song**
- Click the **Delete button** next to a song to remove it from the playlist.
- If the playlist is empty, a **Reset Playlist** button appears to restore default songs.

---

## **Project Structure**
```
mp3-player/
├── index.html         # Main HTML structure
├── styles.css         # CSS for styling the player
├── script.js          # JavaScript logic for playback & controls
├── images/            # Album cover images
└── songs/             # Local MP3 files (optional, currently uses external sources)
```

---

## **Core JavaScript Functions**

### **🎵 `playSong(id)`**
Loads and plays a song by ID, updates UI elements like **title, artist, album cover**, and starts playback.
```javascript
const playSong = (id) => {
    const song = playlist.find((song) => song.id === id);
    audio.src = song.src;
    audio.currentTime = 0;
    audio.play();
    setPlayerDisplay();
    highlightSong();
};
```

### **⏸ `pauseSong()`**
Pauses the song and **remembers the current position** so playback can resume from where it stopped.
```javascript
const pauseSong = () => {
    songCurrentTime = audio.currentTime;
    audio.pause();
};
```

### **⏭ `playNextSong()` & `playPrevSong()`**
Handles **skipping to the next or previous song** in the playlist.
```javascript
const playNextSong = () => {
    const currentSongIndex = getSongIndex();
    if (currentSongIndex < playlist.length - 1) {
        playSong(playlist[currentSongIndex + 1].id);
    }
};
```
```javascript
const playPrevSong = () => {
    const currentSongIndex = getSongIndex();
    if (currentSongIndex > 0) {
        playSong(playlist[currentSongIndex - 1].id);
    }
};
```

### **🔀 `shuffleSongs()`**
Randomizes the song order and reloads the playlist.
```javascript
const shuffleSongs = () => {
    playlist.sort(() => Math.random() - 0.5);
    loadPlaylist(playlist);
};
```

### **🎚 `formatTime(timeInSeconds)`**
Formats raw time (in seconds) into a **MM:SS** display format.
```javascript
const formatTime = (timeInSeconds) => {
    const minutes = Math.floor(timeInSeconds / 60);
    const seconds = Math.floor(timeInSeconds % 60);
    return `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;
};
```

---

## **🎨 Styling Highlights (CSS)**

```css
/* Highlight the currently playing song */
.playlist-song.active {
    background-color: #1db954;
    color: white;
    font-weight: bold;
    border-radius: 5px;
}

/* Progress bar */
.progress-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    margin: 10px 0;
}

.progress-bar {
    flex: 1;
    height: 5px;
    background: #444;
    border-radius: 5px;
    position: relative;
    cursor: pointer;
    margin: 0 10px;
}

.progress {
    height: 100%;
    width: 0%;
    background: #1db954;
    border-radius: 5px;
}
```

---

## **Future Enhancements** 🚀
✅ Volume Control & Mute Button 🔊
✅ Repeat Song Feature 🔁
✅ Drag-and-Drop Playlist Sorting 🎶
✅ Save Playlist to Local Storage 💾
✅ Add More Songs Dynamically ➕

---

## **Contributing**
Feel free to fork this project and make improvements! If you have new ideas, submit a pull request. 💖

**Built with ❤️ using HTML, CSS & JavaScript** 🎵✨

